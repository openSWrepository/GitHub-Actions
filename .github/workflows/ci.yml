name: CI/CD Workflow with Docker and Kubernetes

on:
  push:
    branches:
      - main # main 브랜치에 푸시될 때 실행
  pull_request:
    branches:
      - main # main 브랜치로의 PR이 생성될 때 실행

jobs:
  # 1. 종속성 설치 및 빌드
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Install dependencies
        run: yarn install

      - name: Build project
        run: yarn build

  # 2. 테스트 실행
  test:
    runs-on: ubuntu-latest
    needs: build # build 작업 후 실행
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Install dependencies
        run: yarn install

      - name: Run tests
        run: yarn test

  # 3. Lint 검사
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Install dependencies
        run: yarn install

      - name: Run lint
        run: yarn lint

  # 4. Docker 이미지 빌드 및 푸시
  docker:
    runs-on: ubuntu-latest
    needs: [build, test] # 빌드와 테스트 후 실행
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image
        run: docker build -t my-docker-repo/my-image:latest .

      - name: Push Docker image
        run: docker push my-docker-repo/my-image:latest

  # 5. Kubernetes 배포
  kubernetes:
    runs-on: ubuntu-latest
    needs: docker # Docker 작업 후 실행
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Authenticate with Kubernetes cluster
        env:
          KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
        run: |
          echo "$KUBE_CONFIG_DATA" | base64 --decode > kubeconfig
          export KUBECONFIG=$(pwd)/kubeconfig

      - name: Deploy to Kubernetes
        run: |
          kubectl set image deployment/my-deployment my-container=my-docker-repo/my-image:latest
          kubectl rollout status deployment/my-deployment
